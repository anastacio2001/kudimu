// Push Notification Manager para Kudimu Insights
// Gerencia permiss√µes, subscri√ß√µes e envio de notifica√ß√µes

const API_URL = 'https://kudimu-api.l-anastacio001.workers.dev';

// VAPID Public Key (ser√° necess√°rio gerar no backend)
const VAPID_PUBLIC_KEY = 'BGxYsGVLLHBxZGlmYXRpYW8tZGUtdGVzdGUtcHVibGljLWtleQ==';

/**
 * Converte VAPID key de base64 para Uint8Array
 */
function urlBase64ToUint8Array(base64String) {
  const padding = '='.repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding)
    .replace(/-/g, '+')
    .replace(/_/g, '/');

  const rawData = window.atob(base64);
  const outputArray = new Uint8Array(rawData.length);

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}

/**
 * Registra o Service Worker
 */
export async function registerServiceWorker() {
  if (!('serviceWorker' in navigator)) {
    console.warn('Service Worker n√£o suportado neste navegador');
    return null;
  }

  try {
    const registration = await navigator.serviceWorker.register('/service-worker.js', {
      scope: '/'
    });

    console.log('Service Worker registrado:', registration.scope);

    // Aguarda o service worker estar pronto
    await navigator.serviceWorker.ready;
    console.log('Service Worker pronto');

    return registration;
  } catch (error) {
    console.error('Erro ao registrar Service Worker:', error);
    return null;
  }
}

/**
 * Verifica se notifica√ß√µes s√£o suportadas
 */
export function isNotificationSupported() {
  return 'Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window;
}

/**
 * Verifica o estado da permiss√£o
 */
export function getNotificationPermission() {
  if (!isNotificationSupported()) {
    return 'not-supported';
  }
  return Notification.permission; // 'default', 'granted', 'denied'
}

/**
 * Solicita permiss√£o para notifica√ß√µes
 */
export async function requestNotificationPermission() {
  if (!isNotificationSupported()) {
    throw new Error('Notifica√ß√µes n√£o suportadas neste navegador');
  }

  if (Notification.permission === 'granted') {
    console.log('Permiss√£o j√° concedida');
    return true;
  }

  if (Notification.permission === 'denied') {
    console.warn('Permiss√£o negada pelo usu√°rio');
    return false;
  }

  try {
    const permission = await Notification.requestPermission();
    console.log('Permiss√£o de notifica√ß√£o:', permission);
    return permission === 'granted';
  } catch (error) {
    console.error('Erro ao solicitar permiss√£o:', error);
    return false;
  }
}

/**
 * Subscreve para push notifications
 */
export async function subscribeToPushNotifications() {
  try {
    const registration = await navigator.serviceWorker.ready;

    // Verifica se j√° tem subscri√ß√£o
    let subscription = await registration.pushManager.getSubscription();

    if (subscription) {
      console.log('J√° subscrito:', subscription);
      return subscription;
    }

    // Cria nova subscri√ß√£o
    const applicationServerKey = urlBase64ToUint8Array(VAPID_PUBLIC_KEY);
    
    subscription = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: applicationServerKey
    });

    console.log('Nova subscri√ß√£o criada:', subscription);

    // Envia subscri√ß√£o para o backend
    await sendSubscriptionToBackend(subscription);

    return subscription;
  } catch (error) {
    console.error('Erro ao subscrever push notifications:', error);
    throw error;
  }
}

/**
 * Envia subscri√ß√£o para o backend
 */
async function sendSubscriptionToBackend(subscription) {
  try {
    const token = localStorage.getItem('token');
    if (!token) {
      console.warn('Usu√°rio n√£o autenticado, n√£o √© poss√≠vel salvar subscri√ß√£o');
      return;
    }

    const response = await fetch(`${API_URL}/notifications/subscribe`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(subscription)
    });

    if (!response.ok) {
      throw new Error('Erro ao enviar subscri√ß√£o para backend');
    }

    const data = await response.json();
    console.log('Subscri√ß√£o salva no backend:', data);
    
    return data;
  } catch (error) {
    console.error('Erro ao enviar subscri√ß√£o:', error);
    throw error;
  }
}

/**
 * Cancela subscri√ß√£o de push notifications
 */
export async function unsubscribeFromPushNotifications() {
  try {
    const registration = await navigator.serviceWorker.ready;
    const subscription = await registration.pushManager.getSubscription();

    if (!subscription) {
      console.log('Nenhuma subscri√ß√£o ativa');
      return true;
    }

    // Remove do backend
    await removeSubscriptionFromBackend(subscription);

    // Cancela subscri√ß√£o
    const successful = await subscription.unsubscribe();
    console.log('Subscri√ß√£o cancelada:', successful);

    return successful;
  } catch (error) {
    console.error('Erro ao cancelar subscri√ß√£o:', error);
    return false;
  }
}

/**
 * Remove subscri√ß√£o do backend
 */
async function removeSubscriptionFromBackend(subscription) {
  try {
    const token = localStorage.getItem('token');
    if (!token) return;

    const response = await fetch(`${API_URL}/notifications/unsubscribe`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(subscription)
    });

    if (!response.ok) {
      throw new Error('Erro ao remover subscri√ß√£o do backend');
    }

    console.log('Subscri√ß√£o removida do backend');
  } catch (error) {
    console.error('Erro ao remover subscri√ß√£o:', error);
  }
}

/**
 * Envia notifica√ß√£o local (fallback quando push n√£o est√° dispon√≠vel)
 */
export async function showLocalNotification(title, options = {}) {
  if (!isNotificationSupported()) {
    console.warn('Notifica√ß√µes n√£o suportadas');
    return null;
  }

  if (Notification.permission !== 'granted') {
    console.warn('Permiss√£o de notifica√ß√£o n√£o concedida');
    return null;
  }

  try {
    const registration = await navigator.serviceWorker.ready;
    
    return registration.showNotification(title, {
      body: options.body || '',
      icon: options.icon || '/logo192.png',
      badge: options.badge || '/badge72.png',
      tag: options.tag || 'kudimu-notification',
      requireInteraction: options.requireInteraction || false,
      data: options.data || {},
      actions: options.actions || [],
      vibrate: options.vibrate || [200, 100, 200],
      timestamp: Date.now()
    });
  } catch (error) {
    console.error('Erro ao exibir notifica√ß√£o local:', error);
    return null;
  }
}

/**
 * Obt√©m todas as notifica√ß√µes ativas
 */
export async function getActiveNotifications() {
  try {
    const registration = await navigator.serviceWorker.ready;
    return await registration.getNotifications();
  } catch (error) {
    console.error('Erro ao obter notifica√ß√µes ativas:', error);
    return [];
  }
}

/**
 * Limpa todas as notifica√ß√µes
 */
export async function clearAllNotifications() {
  try {
    const notifications = await getActiveNotifications();
    notifications.forEach(notification => notification.close());
    console.log(`${notifications.length} notifica√ß√µes limpas`);
    return true;
  } catch (error) {
    console.error('Erro ao limpar notifica√ß√µes:', error);
    return false;
  }
}

/**
 * Verifica se usu√°rio est√° subscrito
 */
export async function isUserSubscribed() {
  try {
    const registration = await navigator.serviceWorker.ready;
    const subscription = await registration.pushManager.getSubscription();
    return subscription !== null;
  } catch (error) {
    console.error('Erro ao verificar subscri√ß√£o:', error);
    return false;
  }
}

/**
 * Inicializa sistema de notifica√ß√µes
 */
export async function initializeNotifications() {
  try {
    console.log('Inicializando sistema de notifica√ß√µes...');

    // Registra service worker
    const registration = await registerServiceWorker();
    if (!registration) {
      console.warn('Service Worker n√£o p√¥de ser registrado');
      return false;
    }

    // Verifica suporte
    if (!isNotificationSupported()) {
      console.warn('Notifica√ß√µes n√£o suportadas');
      return false;
    }

    // Verifica permiss√£o
    const permission = getNotificationPermission();
    console.log('Permiss√£o de notifica√ß√£o:', permission);

    if (permission === 'granted') {
      // Se j√° tem permiss√£o, subscreve automaticamente
      const subscribed = await isUserSubscribed();
      if (!subscribed) {
        await subscribeToPushNotifications();
      }
      return true;
    }

    return false;
  } catch (error) {
    console.error('Erro ao inicializar notifica√ß√µes:', error);
    return false;
  }
}

// Notifica√ß√µes predefinidas

export const NotificationTypes = {
  NEW_CAMPAIGN: {
    title: 'üéØ Nova Campanha Dispon√≠vel!',
    getBody: (campaignName) => `A campanha "${campaignName}" est√° dispon√≠vel. Responda agora!`,
    icon: '/logo192.png',
    tag: 'new-campaign',
    requireInteraction: true,
    actions: [
      { action: 'view', title: 'üëÅÔ∏è Ver Campanha' },
      { action: 'dismiss', title: '‚ùå Dispensar' }
    ]
  },
  LEVEL_UP: {
    title: 'üéâ Parab√©ns! Voc√™ subiu de n√≠vel!',
    getBody: (level) => `Voc√™ alcan√ßou o n√≠vel ${level}! Continue participando.`,
    icon: '/logo192.png',
    tag: 'level-up',
    requireInteraction: false
  },
  MEDAL_EARNED: {
    title: 'üèÖ Nova Medalha Conquistada!',
    getBody: (medalName) => `Voc√™ ganhou a medalha "${medalName}"!`,
    icon: '/logo192.png',
    tag: 'medal-earned',
    requireInteraction: false
  },
  REWARD_RECEIVED: {
    title: 'üí∞ Recompensa Recebida!',
    getBody: (amount) => `Voc√™ recebeu ${amount} AOA. Confira suas recompensas!`,
    icon: '/logo192.png',
    tag: 'reward-received',
    requireInteraction: false
  },
  REMINDER: {
    title: '‚è∞ Lembrete Kudimu',
    getBody: () => 'H√° campanhas aguardando sua participa√ß√£o!',
    icon: '/logo192.png',
    tag: 'reminder',
    requireInteraction: false
  }
};

export default {
  registerServiceWorker,
  isNotificationSupported,
  getNotificationPermission,
  requestNotificationPermission,
  subscribeToPushNotifications,
  unsubscribeFromPushNotifications,
  showLocalNotification,
  getActiveNotifications,
  clearAllNotifications,
  isUserSubscribed,
  initializeNotifications,
  NotificationTypes
};
